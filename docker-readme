#########################################################
# Docker install in Ubuntu
#########################################################
1. uninstall old version
apt-get remove docker docker-engine docker.io containerd runc

2. install docker
1) set storage
apt-get update
apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common                
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
apt-key finger
apt-key fingerprint 0EBFCD88
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

2) install
apt-get update
# newest version
apt-get install docker-ce docker-ce-cli containerd.io
# specific version
apt-cache madison docker-ce
apt-get install docker-ce=5:18.09.9~3-0~ubuntu-bionic docker-ce-cli=5:18.09.9~3-0~ubuntu-bionic containerd.io
# version check
docker version

3) docker-compose, it is optional for use docker-compose.yml
curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
docker-compose --version

#########################################################
# How to make image and run
#########################################################
1. download/remove docker image
# search
docker search ubuntu:18.04
# download
docker pull ubuntu:18.04
# remove
docker rmi [OPTIONS] IMAGE [IMAGE...]

2. make my docker image
vi /root/docker/Dockerfile
cd /root/docker
# make image
docker build --rm --tag test:v1.0 .
# remove image
docker rmi test:v1.0
# remove untagged image
docker rmi $(docker images -f "dangling=true" -q)

3. run docker image
# create and run image
docker run ubuntu:18.04
# Automatically remove the container when it exits, and run image again
docker run --name test-001 --rm -it test:v1.0 /bin/bash
# exec command
docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
docker exec test-001 ip addr show   # execute command "ip addr show"
docker exec -it test-001 /bin/bash # instead of ssh
# check container
docker ps -a
# stop or remove
docker stop ${TENSORFLOW_CONTAINER_ID}
docker rm [OPTIONS] CONTAINER [CONTAINER...]


#########################################################
# Save and Load docker image to .tar file
#########################################################
# tar
docker save -o test.tar test:v1.0
docker load -i test.tar
# tar.gz
docker save test:v1.0 | gzip > test.tar.gz
zcat .tar.gz | docker load


#########################################################
# Network
#########################################################
docker network ls
# The default bridge network
docker network inspect bridge
# run with the same configuration as host 
docker run --net=host --name test-001 --rm -it test:v1.0 /bin/bash


#########################################################
# Troubleshooting
#########################################################
# solve read only file system
docker run --privileged --net=host --name test-001 --rm -it test:v1.0 /bin/bash
docker run --privileged --net=host --cap-add=ALL -v /mnt/huge:/mnt/huge -v /lib/modules:/lib/modules:ro -v /sys/bus/pci/devices:/sys/bus/pci/devices -v /sys/devices/system/node:/sys/devices/system/node -v /dev:/dev --name test-001 --rm -it test:v1.0 /bin/bash
